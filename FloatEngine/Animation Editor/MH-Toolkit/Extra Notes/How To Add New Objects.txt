This guide will show you how to add a new game object to your engine (like a new type of enemy or powerup).

================================
How To Add New Game Objects
================================
1. Make a new class for your GameObject, copy over the using statements and make the class public

2. Make the class derive from the appropriate parent class. This could be GameObject, AnimatedObject or Character

3. Make sure the .png file you're trying to load is in the Content folder, and the "Copy to Output" option in the Properties
window is set as "Copy if newer". This way the file is copied next to the .exe when the game is compiled.

4. Override the Load function to look something like this:
	public override void Load(ContentManager content)
	{
		//Load our image/sprite sheet:
		image = TextureLoader.Load("spritesheet", content);

		//Load any animation stuff if this object animates:
		LoadAnimation("ShyBoy.anm", content);
		ChangeAnimation(Animations.IdleLeft); //Set our default animation.

		//Load stuff from our parent class:
		base.Load(content);

		//Customize the size of our bounding box for collisions:
		boundingBoxOffset.X = 0;
		boundingBoxOffset.Y = 0;
		boundingBoxWidth = animationSet.width; //or use image.Width if it's not animated
		boundingBoxHeight = animationSet.height; //or use image.Height if it's not animated
	}

5. Right click Editor.cs and click View Code. At the top in the ObjectType enum, type the name of the new object so we can drag
and drop it from the Editor. Make sure you add all new objects BEFORE NumOfObjects, that one needs to be the last item in the list.

6. Make sure the objectsNamespace variable is set correctly. There's a comment next to the variable that shows you how to do it.

7. Return to the new class you made. Override the Update function so you can program the logic needed for your object. Here’s an
example of how it would look:
	public override void Update(List<GameObject> objects, Map map)
	{
		base.Update(objects, map);
	}

8. (Optional) If your object is animated... you can override the UpdateAnimations function to write the animation logic. Example:
	protected override void UpdateAnimations()
	{
		if (currentAnimation == null)	
			return; //Animation isn't loaded, so return.

		base.UpdateAnimations();

		//TODO: ADD YOUR ANIMATION LOGIC HERE AT THE BOTTOM!
	}

9. Make sure you add the following code above the objects list in LevelData.cs:

 	[XmlElement("NAMEOFYOURNEWCLASS", Type = typeof(NAMEOFYOURNEWCLASS))]

10. Make sure your new class has an EMPTY constructor. If XML doesn't find an empty constructor it will crash while saving levels!

11. Creating a door or collide to load new state or scene:

        public override void Update(List<GameObject> objects, Map map)
            {
                if (active == false)
                    return;

                CheckPlayerCollison(objects, map);

                base.Update(objects, map);
            }

            public void CheckPlayerCollison(List<GameObject> objects, Map map)
            {
                if (objects[0].CheckCollision(BoundingBox) == true)
                {
                    LoadNewScene();
                }
            }
            
            public void LoadNewScene() 
            {
                game.LoadLevel("Level2.float");
            }
        }
    }


